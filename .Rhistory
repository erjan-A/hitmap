hotel_rr <- hotel_r[c("results.property_name", "results.location")]
hotel_rr <- hotel_r[c("results.property_name", unlist(results.location))]
hotel_rr <- hotel_r[c("results.property_name", unlist("results.location"))]
hotel_rr <- hotel_r[c("results.property_name", unlist(hotel_r.results.location))]
hotel_rr <- hotel_r[c("results.property_name", unlist(hotel_r$results.location))]
hotel_rr <- hotel_r[c("results.property_name", "results.location")]
x <- do.call(c, hotel_rr$results.location)
x <- do.call(rbind(), hotel_rr$results.location)
x <- do.call(rbind(2), hotel_rr$results.location)
x <- do.call(rbind, hotel_rr$results.location)
View(x)
x <- c(hotel_rr$results.location)
hotel_rr <- hotel_r[c("results.property_name", c("results.location"))]
c(hotel_rr)
hotel_rr <- c(hotel_rr)
hotel_rr <- do.call(rbind, hotel_rr)
View(hotel_rr)
hotel_rr <- hotel_r[c("results.property_name", c("results.location"))]
flatten(hotel_rr)
hotel_rr <- flatten(hotel_rr)
hotel_r <- flatten(hotel_r)
hotel_r <- flatten(hotel_r)
View(hotel_r)
?fromJSON
library(httr)
library(httpuv)
library(jsonlite)
library(base64enc)
library(dplyr)
consumerKey = "1sHLetbrWRuoOWbAHeK2JN6IATsrOwE1"
HitMap_hotels <- function(checkIn, checkOut) {
scheme <- "http"
host <- "api.sandbox.amadeus.com/v1.2"
# Build API URL.
url <- paste0(scheme, "://", host, "/hotels/search-circle?latitude=37.793344&longitude=-122.403101&radius=50&check_in=", checkIn, "&check_out=", checkOut, "&number_of_results=50&apikey=", consumerKey)
# Make request.
results <- data.frame(jsonlite::fromJSON(url, flatten = TRUE))
# Get Json Result
return(results)
}
#Get request Examples
#result <- GET("http://api.sandbox.amadeus.com/v1.2/hotels/search-circle?latitude=37.793344&longitude=-122.403101&radius=50&check_in=2016-04-28&check_out=2016-04-30&number_of_results=50&apikey=1sHLetbrWRuoOWbAHeK2JN6IATsrOwE1")
hotel_r <- HitMap_hotels("2016-05-10", "2016-05-15")
head(hotel_r)
hotel_r <- subset(hotel_r, select = -c(results.contacts))
hotel_r <- subset(hotel_r, select = -c(results.amenities))
hotel_r <- subset(hotel_r, select = -c(results.awards))
hotel_r <- subset(hotel_r, select = -c(results.images))
hotel_r <- subset(hotel_r, select = -c(results.rooms))
library(httr)
library(httpuv)
library(jsonlite)
library(base64enc)
library(dplyr)
consumerKey = "1sHLetbrWRuoOWbAHeK2JN6IATsrOwE1"
HitMap_hotels <- function(checkIn, checkOut) {
scheme <- "http"
host <- "api.sandbox.amadeus.com/v1.2"
# Build API URL.
url <- paste0(scheme, "://", host, "/hotels/search-circle?latitude=37.793344&longitude=-122.403101&radius=50&check_in=", checkIn, "&check_out=", checkOut, "&number_of_results=50&apikey=", consumerKey)
# Make request.
results <- data.frame(jsonlite::fromJSON(url, flatten = TRUE))
# Get Json Result
return(results)
}
#Get request Examples
#result <- GET("http://api.sandbox.amadeus.com/v1.2/hotels/search-circle?latitude=37.793344&longitude=-122.403101&radius=50&check_in=2016-04-28&check_out=2016-04-30&number_of_results=50&apikey=1sHLetbrWRuoOWbAHeK2JN6IATsrOwE1")
rrr <- HitMap_hotels("2016-05-10", "2016-05-10")
rrr <- HitMap_hotels("2016-05-10", "2016-05-15")
View(rrr)
View(rrr)
View(hotels_sample)
View(rrr)
rrr <- HitMap_hotels("2016-05-10", "2016-05-15")
library(httr)
library(httpuv)
library(jsonlite)
library(base64enc)
library(dplyr)
consumerKey = "1sHLetbrWRuoOWbAHeK2JN6IATsrOwE1"
HitMap_hotels <- function(checkIn, checkOut) {
scheme <- "http"
host <- "api.sandbox.amadeus.com/v1.2"
# Build API URL.
url <- paste0(scheme, "://", host, "/hotels/search-circle?latitude=37.793344&longitude=-122.403101&radius=50&check_in=", checkIn, "&check_out=", checkOut, "&number_of_results=50&apikey=", consumerKey)
# Make request.
results <- data.frame(jsonlite::fromJSON(url, flatten = TRUE))
# Get Json Result
return(results)
}
#Get request Examples
#result <- GET("http://api.sandbox.amadeus.com/v1.2/hotels/search-circle?latitude=37.793344&longitude=-122.403101&radius=50&check_in=2016-04-28&check_out=2016-04-30&number_of_results=50&apikey=1sHLetbrWRuoOWbAHeK2JN6IATsrOwE1")
rrr <- HitMap_hotels("2016-05-10", "2016-05-15")
rrr <- subset(hotel_r, select = -c(results.contacts, results.amenities, results.images, results.rooms))
rrr <- subset(rrr, select = -c(results.contacts, results.amenities, results.images, results.rooms))
rrr <- subset(rrr, select = -c(results.contacts, results.amenities, results.images, results.rooms, results.awards))
View(rrr)
shiny::runApp()
hotel_r <- HitMap_hotels("2016-05-10", "2016-05-15")
hotel_r <- subset(hotel_r, select = -c(results.contacts, results.amenities, results.images, results.rooms, results.awards))
df.hotel_r <- SpatialPointsDataFrame(coords=hotel_r[, c("results.location.longitude", "results.location.latitude")], data=hotel_r[, c("results.property_name", "results.address.line1", "results.address.postal_code", "results.total_price.amount","results.daily_rate.amount", "results._links.more_rooms_at_this_hotel.href")], proj4string=CRS("+proj=longlat +datum=WGS84"))
head(hotel_r)
df.hotel_r <- SpatialPointsDataFrame(coords=hotel_r[, c("results.location.longitude", "results.location.latitude")], data=hotel_r[, c("results.property_name", "results.address.line1", "results.address.postal_code", "results.total_price.amount","results.min_daily_rate.amount", "results._links.more_rooms_at_this_hotel.href")], proj4string=CRS("+proj=longlat +datum=WGS84"))
runApp()
runApp()
count(hotel_r)
class(count(hotel_r))
as.integer(count(hotel_r))
hotels_sample <- data.frame(id=1:2,
name=c("Omni San Francisco Hotel",
"Holiday Inn San Francisco Golden Gateway"),
lat=c(37.793344, 37.790309),
lon=c(-122.403101, -122.421986),
price=c(152, 105))
runApp()
runApp()
runApp()
hotel_blocks <- over(x=hotel_r, y=blocks)
#Load San Francisco Census Blocks data
blocks <- shapefile("data/tl_2010_06075_tabblock10edited/tl_2010_06075_tabblock10.shp")
# blocks <- shapefile("data/cb_2014_06_tract_500k/cb_2014_06_tract_500k.shp")
blocks <- spTransform(x=blocks, CRSobj=CRS("+proj=longlat +datum=WGS84"))
names(blocks@data) <- tolower(names(blocks@data))
# Cleaning and Keeping only complete cases
# Loading SF 2015 and 2016 crime data -> remove unnecessary columns -> merge -> load category table -> assign (match) weights to each crime based on category
crime_data <- crime_data[complete.cases(crime_data), ]
# Assign category score to each crime
cat <- match(x=crime_data$Category, table=category_score$Category)
crime_data$Score <- category_score$Score[cat]
#Remove unncessary columns and turn crime_data in to data frame
df.crime_data <- data.frame(category=crime_data$Category, pdid=crime_data$PdId, score=crime_data$Score, latitude=crime_data$Y, longitude=crime_data$X)
###########################################################################
#Convert crime data to a spatial points object
df.crime_data <- SpatialPointsDataFrame(coords=df.crime_data[, c("longitude", "latitude")], data=df.crime_data[, c("category", "pdid", "score")], proj4string=CRS("+proj=longlat +datum=WGS84"))
#Spatial overlay to identify census polygon in which each crime point falls
#The Result `crime_blocks` is a dataframe with the block data for each point
crime_blocks <- over(x=df.crime_data, y=blocks)
#Add block data to each crime
df.crime_data@data <- data.frame(df.crime_data@data, crime_blocks)
#Aggregate crimes by block
agg_crimeblocks <- aggregate(cbind(df.crime_data@data$score)~geoid10, data = df.crime_data, FUN = sum)
#Format score into ranking
agg_crimeblocks$V1 <- dense_rank(agg_crimeblocks$V1)
#Add number of crimes to blocks object
m <- match(x=blocks@data$geoid10, table=agg_crimeblocks$geoid10)
blocks@data$score <- agg_crimeblocks$V1[m]
maxScore <- max(agg_crimeblocks$V1)
#Load San Francisco 2015 crime data
crime_data <- read.csv("data/SFPD_Incidents_-_Previous_Year__2015_.csv", stringsAsFactors = FALSE, header = TRUE)
crime_data$Category <- tolower(crime_data$Category)
#Load Categroy Scoring data
category_score <- read.csv("data/category_score.csv", stringsAsFactors = FALSE, header = TRUE)
category_score$Category <- tolower(category_score$Category)
#Load SF attractions data
attractions <- read.csv("data/sf-attractions.csv", stringsAsFactors = FALSE, header = TRUE)
###########################################################################
# Cleaning and Keeping only complete cases
# Loading SF 2015 and 2016 crime data -> remove unnecessary columns -> merge -> load category table -> assign (match) weights to each crime based on category
crime_data <- crime_data[complete.cases(crime_data), ]
# Assign category score to each crime
cat <- match(x=crime_data$Category, table=category_score$Category)
crime_data$Score <- category_score$Score[cat]
#Remove unncessary columns and turn crime_data in to data frame
df.crime_data <- data.frame(category=crime_data$Category, pdid=crime_data$PdId, score=crime_data$Score, latitude=crime_data$Y, longitude=crime_data$X)
###########################################################################
#Convert crime data to a spatial points object
df.crime_data <- SpatialPointsDataFrame(coords=df.crime_data[, c("longitude", "latitude")], data=df.crime_data[, c("category", "pdid", "score")], proj4string=CRS("+proj=longlat +datum=WGS84"))
#Spatial overlay to identify census polygon in which each crime point falls
#The Result `crime_blocks` is a dataframe with the block data for each point
crime_blocks <- over(x=df.crime_data, y=blocks)
#Add block data to each crime
df.crime_data@data <- data.frame(df.crime_data@data, crime_blocks)
#Aggregate crimes by block
agg_crimeblocks <- aggregate(cbind(df.crime_data@data$score)~geoid10, data = df.crime_data, FUN = sum)
#Format score into ranking
agg_crimeblocks$V1 <- dense_rank(agg_crimeblocks$V1)
#Add number of crimes to blocks object
m <- match(x=blocks@data$geoid10, table=agg_crimeblocks$geoid10)
blocks@data$score <- agg_crimeblocks$V1[m]
maxScore <- max(agg_crimeblocks$V1)
hotel_blocks <- over(x=hotel_r, y=blocks)
hotels_sample <- data.frame(id=1:2,
name=c("Omni San Francisco Hotel",
"Holiday Inn San Francisco Golden Gateway"),
lat=c(37.793344, 37.790309),
lon=c(-122.403101, -122.421986),
price=c(152, 105))
df.hotels_sample <- SpatialPointsDataFrame(coords=hotels_sample[, c("lon", "lat")], data=hotels_sample[, c("name", "price")], proj4string=CRS("+proj=longlat +datum=WGS84"))
hotel_blocks <- over(x=df.hotels_sample, y=blocks)
hotel_r <- SpatialPointsDataFrame(coords=hotel_r[, c("results.location.longitude", "results.location.latitude")], data=hotel_r[, c("results.property_name", "results.address.line1", "results.address.postal_code", "results.total_price.amount","results.min_daily_rate.amount", "results._links.more_rooms_at_this_hotel.href")], proj4string=CRS("+proj=longlat +datum=WGS84"))
hotel_blocks <- over(x=hotel_r, y=blocks)
View(hotel_blocks)
library(httr)
library(httpuv)
library(jsonlite)
library(base64enc)
library(dplyr)
consumerKey = "1sHLetbrWRuoOWbAHeK2JN6IATsrOwE1"
HitMap_hotels <- function(checkIn, checkOut) {
scheme <- "http"
host <- "api.sandbox.amadeus.com/v1.2"
# Build API URL.
url <- paste0(scheme, "://", host, "/hotels/search-box?south_west_corner=37.70827%2C%20-122.523994&north_east_corner=37.815615%2C%20-122.35302&check_in=", checkIn, "&check_out=", checkOut, "&number_of_results=50&apikey=", consumerKey)
# Make request.
results <- data.frame(jsonlite::fromJSON(url, flatten = TRUE))
# Get Json Result
return(results)
}
#Get request Examples
#result <- GET("http://api.sandbox.amadeus.com/v1.2/hotels/search-circle?latitude=37.793344&longitude=-122.403101&radius=50&check_in=2016-04-28&check_out=2016-04-30&number_of_results=50&apikey=1sHLetbrWRuoOWbAHeK2JN6IATsrOwE1")
hotel_r <- HitMap_hotels("2016-05-10", "2016-05-15")
hotel_r <- subset(hotel_r, select = -c(results.contacts, results.amenities, results.images, results.rooms, results.awards, results.marketing_text))
hotel_r <- SpatialPointsDataFrame(coords=hotel_r[, c("results.location.longitude", "results.location.latitude")], data=hotel_r[, c("results.property_name", "results.address.line1", "results.address.postal_code", "results.total_price.amount","results.min_daily_rate.amount", "results._links.more_rooms_at_this_hotel.href")], proj4string=CRS("+proj=longlat +datum=WGS84"))
hotel_blocks <- over(x=hotel_r, y=blocks)
hotel_r@data <- data.frame(hotel_r@data, score=round(100-(hotel_blocks$score/maxScore)*100,digits=2))
hotels_by_score <- df.hotels_sample@data
hotels_by_score <- hotel_r[order(-hotel_r$score),]
hotels_by_score <- hotel_R@data
hotels_by_score <- hotel_r@data
hotel_r <- hotel_r@data
hotel_r <- hotel_r[order(-hotel_r$score),]
runApp()
hotel_r_by_scores <- df.hotel_r@data
hotel_r_by_scores <- hotel_r_by_cores[order(-hotel_r$score),]
hotel_r_by_scores <- df.hotel_r@data
hotel_r_by_scores <- hotel_r_by_scores[order(-hotel_r$score),]
count(hotel_r_by_scores)
count(hotel_r_by_scores)_-
runApp()
runApp()
runApp()
View(hotel_r_by_scores)
hotel_r_by_scores$results.property_name[1]
runApp()
library(httr)
library(httpuv)
library(jsonlite)
library(base64enc)
library(dplyr)
consumerKey = "1sHLetbrWRuoOWbAHeK2JN6IATsrOwE1"
HitMap_hotels <- function(checkIn, checkOut) {
scheme <- "http"
host <- "api.sandbox.amadeus.com/v1.2"
# Build API URL.
url <- paste0(scheme, "://", host, "/hotels/search-box?south_west_corner=37.70827%2C%20-122.523994&north_east_corner=37.815615%2C%20-122.35302&check_in=", checkIn, "&check_out=", checkOut, "&number_of_results=50&apikey=", consumerKey)
# Make request.
results <- data.frame(jsonlite::fromJSON(url, flatten = TRUE))
# Get Json Result
return(results)
}
#Get request Examples
#result <- GET("http://api.sandbox.amadeus.com/v1.2/hotels/search-circle?latitude=37.793344&longitude=-122.403101&radius=50&check_in=2016-04-28&check_out=2016-04-30&number_of_results=50&apikey=1sHLetbrWRuoOWbAHeK2JN6IATsrOwE1")
#Load San Francisco Census Blocks data
blocks <- shapefile("data/tl_2010_06075_tabblock10edited/tl_2010_06075_tabblock10.shp")
# blocks <- shapefile("data/cb_2014_06_tract_500k/cb_2014_06_tract_500k.shp")
blocks <- spTransform(x=blocks, CRSobj=CRS("+proj=longlat +datum=WGS84"))
names(blocks@data) <- tolower(names(blocks@data))
#Load San Francisco 2015 crime data
crime_data <- read.csv("data/SFPD_Incidents_-_Previous_Year__2015_.csv", stringsAsFactors = FALSE, header = TRUE)
crime_data$Category <- tolower(crime_data$Category)
#Load Categroy Scoring data
category_score <- read.csv("data/category_score.csv", stringsAsFactors = FALSE, header = TRUE)
category_score$Category <- tolower(category_score$Category)
#Load SF attractions data
attractions <- read.csv("data/sf-attractions.csv", stringsAsFactors = FALSE, header = TRUE)
###########################################################################
# Cleaning and Keeping only complete cases
# Loading SF 2015 and 2016 crime data -> remove unnecessary columns -> merge -> load category table -> assign (match) weights to each crime based on category
crime_data <- crime_data[complete.cases(crime_data), ]
# Assign category score to each crime
cat <- match(x=crime_data$Category, table=category_score$Category)
crime_data$Score <- category_score$Score[cat]
#Remove unncessary columns and turn crime_data in to data frame
df.crime_data <- data.frame(category=crime_data$Category, pdid=crime_data$PdId, score=crime_data$Score, latitude=crime_data$Y, longitude=crime_data$X)
###########################################################################
#Convert crime data to a spatial points object
df.crime_data <- SpatialPointsDataFrame(coords=df.crime_data[, c("longitude", "latitude")], data=df.crime_data[, c("category", "pdid", "score")], proj4string=CRS("+proj=longlat +datum=WGS84"))
#Spatial overlay to identify census polygon in which each crime point falls
#The Result `crime_blocks` is a dataframe with the block data for each point
crime_blocks <- over(x=df.crime_data, y=blocks)
#Add block data to each crime
df.crime_data@data <- data.frame(df.crime_data@data, crime_blocks)
#Aggregate crimes by block
agg_crimeblocks <- aggregate(cbind(df.crime_data@data$score)~geoid10, data = df.crime_data, FUN = sum)
#Format score into ranking
agg_crimeblocks$V1 <- dense_rank(agg_crimeblocks$V1)
#Add number of crimes to blocks object
m <- match(x=blocks@data$geoid10, table=agg_crimeblocks$geoid10)
blocks@data$score <- agg_crimeblocks$V1[m]
maxScore <- max(agg_crimeblocks$V1)
###########################################################################
## Plotting an interactive map with leaflet ##
# Copying blocks df
df.blocks <- blocks
# Cleaning blocks data: replacing NA (crime rate) with 0
df.blocks@data$score[is.na(df.blocks@data$score)] <- 0
hotel_r <- HitMap_hotels("2016-05-10","2016-05-15)
hotel_r <- subset(hotel_r, select = -c(results.contacts, results.amenities, results.images, results.rooms, results.awards, results.marketing_text))
hotel_r <- HitMap_hotels("2016-05-10","2016-05-15)
hotel_r <- subset(hotel_r, select = -c(results.contacts, results.amenities, results.images, results.rooms, results.awards, results.marketing_text))
hotel_r <- HitMap_hotels("2016-05-10","2016-05-15")
hotel_r <- subset(hotel_r, select = -c(results.contacts, results.amenities, results.images, results.rooms, results.awards, results.marketing_text))
df.hotel_r <- SpatialPointsDataFrame(coords=hotel_r[, c("results.location.longitude", "results.location.latitude")], data=hotel_r[, c("results.property_name", "results.address.line1", "results.address.postal_code", "results.total_price.amount","results.min_daily_rate.amount", "results._links.more_rooms_at_this_hotel.href")], proj4string=CRS("+proj=longlat +datum=WGS84"))
hotel_blocks <- over(x=df.hotel_r, y=blocks)
#Add block data to each hotel
df.hotel_r@data <- data.frame(df.hotel_r@data, score=round(100-(hotel_blocks$score/maxScore)*100,digits=2))
hotel_r_by_scores <- df.hotel_r@data
hotel_r_by_scores <- hotel_r_by_scores[order(-hotel_r_by_scores$score),]
hotel_r_by_scores$results.property_name[1]
result_count <- as.character(as.integer(count(hotel_r_by_scores)))
for (i in 1:as.integer(result_count)) {
print(hotel_r_by_scores$results.property_name[i])
}
runApp()
runApp()
?div
runApp()
count(hotel_r_by_scores)
length(hotel_r_by_scores)
runApp()
runApp()
runApp()
runApp()
runApp()
class)i
class(i)
i
i <- append(i, 20)
i
hotels <- list()
runApp()
lapply(1:as.integer(count(hotel_r_by_scores)), function(i) {
hotels <- append(hotels, tags$h4(hotel_r_by_scores$results.property_name[i]))
})
runApp()
?tags$a
?tags
runApp()
runApp()
hotel_r_by_scores$score
hotel_r_by_scores$score[1]
gsub(" ", "", hotel_r_by_scores$score[1])
runApp()
runApp()
df.blocks <- shapefile("data/df.blocks/df.blocks.shp")
df.blocks@data$score[is.na(df.blocks@data$score)] <- 0
hotel_r <- HitMap_hotels(input$dateRange[1],input$dateRange[2])
hotel_r <- HitMap_hotels("2016-05-20", "2016-05-25")
hotel_r <- subset(hotel_r, select = -c(results.contacts, results.amenities, results.images, results.rooms, results.awards, results.marketing_text))
df.hotel_r <- SpatialPointsDataFrame(coords=hotel_r[, c("results.location.longitude", "results.location.latitude")], data=hotel_r[, c("results.property_name", "results.address.line1", "results.address.postal_code", "results.total_price.amount","results.min_daily_rate.amount", "results._links.more_rooms_at_this_hotel.href")], proj4string=CRS("+proj=longlat +datum=WGS84"))
hotel_blocks <- over(x=df.hotel_r, y=df.blocks)
df.blocks <- SpatialPolygonsDataFrame()
df.blocks <- SpatialPolygonsDataFrame()
?SpatialPolygonsDataFrame
?shapefile
df.blocks <- readOGR("data/tl_2010_06075_tabblock10edited", "tl_2010_06075_tabblock10")
hotel_blocks <- over(x=df.hotel_r, y=df.blocks)
df.blocks <- spTransform(x=df.blocks, CRSobj=CRS("+proj=longlat +datum=WGS84"))
names(df.blocks@data) <- tolower(names(df.blocks@data))
hotel_blocks <- over(x=df.hotel_r, y=df.blocks)
runApp()
runApp()
?plotOutput
rsconnect::deployApp('~/Downloads/hitmap1')
## Dependency package - if you do not have dplyr installed, you will need to execute
## install.packages('dplyr') before running this line.
library(dplyr)
## Set your working directory here: this should be the location where you saved trip_data_1.csv
setwd('<SET YOUR WORKING DIRECTORY HERE>')
## This read.csv function reads in only the first 10K rows of the first trip data csv file.
## The colClasses and comment.char arguments let the function know specifics about the csv
## that let it read much faster, although it can read the file without these arguments.
tripData <- read.csv('trip_data_1.csv', nrows = 10000, colClasses = c('character',
'character', 'character', 'integer', 'character', 'character', 'character',
'integer', 'integer', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric'),
comment.char = '')
tripData <- select(tripData, pickup_longitude, pickup_latitude)
#filter out longitude and latitude values that are way outside normal levels (bad data)
tripData <- subset(tripData, (tripData$pickup_longitude > -74.1 & tripData$pickup_longitude < -73.7 & tripData$pickup_latitude < 60))
## set.seed ensures we can reproduce 'random' selections by algorithms such as kmeans
set.seed(12345)
## this kmeans function chooses 20 random locations, then weighs distribution of tripset points by
## those centroids and relocates the centroids repeatedly until the movement is near zero and they
## represent fairly useful clusters of points.
clusters <- kmeans(tripData, 20, nstart = 10)
##--------------------------------##
## NYCPlot
##--------------------------------##
## plot() creates a plot object with the original 10K points, by latitude and longitude
plot(tripData, col = clusters$cluster)
## points() appends a series of points to the open plot, taken from the clusters object centers
## (which are given in latitude and longitude)
points(clusters$centers, col = 'red', pch = 10)
## Convert Clusters$cluster to character vector to colorize in plot as a discrete variable rather than a continuous one
## (Discrete variables automatically color in distinct color schemes and are easily distinguised; continuous ones show
## up in shades of the same color to show gradation.  In this case, we want distinct colors so we convert to character vector)
clusters$cluster <- as.character(clusters$cluster)
## load the ggmap package to overlay points on top of a google map image
## Dependency package - if you do not have ggmap installed, you will need to execute
## install.packages('ggmap') before running this line.
library(ggmap)
## Retrieve the map data for NYC based on longitude and latitude
NYC = get_map(location = c(lon = -73.9, lat = 40.75), zoom = 11, maptype = 'roadmap')
## render the map data as a plottable object
mapVis <- ggmap(NYC)
mapVis
## overlay datapoints, color coded by cluster as a discrete variable
mapVis <- mapVis + geom_point(data = tripData, aes(x = pickup_longitude, y = pickup_latitude, colour = clusters$cluster))
mapVis
##--------------------------------##
## cost calculation
##--------------------------------##
## Now we'll create a linear model to approximate the distance traveled as a function of the net change in latitude and longitude
## We'll read in the top 10K rows again and this time keep a different set of columns
tripData2 <- read.csv('trip_data_1.csv', nrows = 10000, colClasses = c('character',
'character', 'character', 'integer', 'character', 'character', 'character',
'integer', 'integer', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric'),
comment.char = '')
tripData2 <- select(tripData2,
trip_distance,
pickup_longitude,
pickup_latitude,
dropoff_longitude,
dropoff_latitude) %>%
## Here we use the mutate() function to create a new covariate; the net change in latitude and longitude
mutate(latlong_traveled = sqrt((pickup_longitude - dropoff_longitude) ^ 2 + (pickup_latitude - dropoff_latitude) ^ 2))
## Filter out the outlier data
tripData2 <- subset(tripData2, (tripData2$pickup_longitude > -74.1 & tripData2$pickup_longitude < -73.7 & tripData2$pickup_latitude < 60))
tripData2 <- subset(tripData2, latlong_traveled < 20)
dist_model <- lm(trip_distance ~ latlong_traveled, data = tripData2)
## Printing out the model gives us the model coefficients; the intercept and slope of the linear approximation
dist_model
## Plotting the model gives us a series of four diagnostic plots that indicate the quality of the model through representations of the point
## residuals. These plots show that this model isn't really a very good approximation; that the residuals are high and skew the data considerably.
## However, our concern is with aggregate approximation rather than single-case precision, so this works well enough.
plot(dist_model)
##-------------------##
## LM Plot
##-------------------##
## So let's see wht the approximation really looks like:
## First we plot the 10000 data points, latlong traveled vs. actual trip distance
plot(tripData2$latlong_traveled, tripData2$trip_distance)
## Now we plot the points as they would be predicted by our linear model, using the predict() function
points(tripData2$latlong_traveled, predict(dist_model, newdata = tripData2), col = 'red', pch = 19, cex = .5)
tripData <- read.csv('trip_data_1.csv', nrows = 10000, colClasses = c('character',
'character', 'character', 'integer', 'character', 'character', 'character',
'integer', 'integer', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric'),
comment.char = '')
library(dplyr)
setwd('~/Downloads')
tripData <- read.csv('trip_data_1.csv', nrows = 10000, colClasses = c('character',
'character', 'character', 'integer', 'character', 'character', 'character',
'integer', 'integer', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric'),
comment.char = '')
tripData <- read.csv('trip_data_1.csv', nrows = 10000, colClasses = c('character',
'character', 'character', 'integer', 'character', 'character', 'character',
'integer', 'integer', 'numeric', 'numeric', 'numeric',  'numeric', 'numeric', 'numeric'),
comment.char = '')
tripData <- read.csv('trip_data_1.csv', nrows = 10000, colClasses = c('character',
'character', 'character', 'integer', 'character', 'character', 'character',
'integer', 'integer', 'numeric', 'integer', 'numeric', 'numeric', 'numeric', 'numeric'),
comment.char = '')
tripData <- read.csv('trip_data_1.csv', nrows = 10000, colClasses = c('character',
'character', 'character', 'integer', 'character', 'character', 'integer', 'character',
'integer', 'integer', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric'),
comment.char = '')
tripData <- read.csv('trip_data_1.csv', nrows = 10000, colClasses = c('character',
'character', 'character','character', 'integer', 'character', 'character', 'character',
'integer', 'integer', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric'),
comment.char = '')
tripData <- select(tripData, pickup_longitude, pickup_latitude)
View(tripData)
tripData <- subset(tripData, (tripData$pickup_longitude > -74.1 & tripData$pickup_longitude < -73.7 & tripData$pickup_latitude < 60))
## set.seed ensures we can reproduce 'random' selections by algorithms such as kmeans
set.seed(12345)
clusters <- kmeans(tripData, 20, nstart = 10)
plot(tripData, col = clusters$cluster)
points(clusters$centers, col = 'red', pch = 10)
clusters$cluster <- as.character(clusters$cluster)
NYC = get_map(location = c(lon = -73.9, lat = 40.75), zoom = 11, maptype = 'roadmap')
mapVis <- ggmap(NYC)
mapVis
## overlay datapoints, color coded by cluster as a discrete variable
mapVis <- mapVis + geom_point(data = tripData, aes(x = pickup_longitude, y = pickup_latitude, colour = clusters$cluster))
mapVis
tripData2 <- read.csv('trip_data_1.csv', nrows = 10000, colClasses = c('character',
'character', 'character', 'integer', 'character', 'character', 'character',
'integer', 'integer', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric'),
comment.char = '')
tripData2 <- read.csv('trip_data_1.csv', nrows = 10000, colClasses = c('character',
'character', 'character','character', 'integer', 'character', 'character', 'character',
'integer', 'integer', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric'),
comment.char = '')
tripData2 <- select(tripData2,
trip_distance,
pickup_longitude,
pickup_latitude,
dropoff_longitude,
dropoff_latitude) %>%
## Here we use the mutate() function to create a new covariate; the net change in latitude and longitude
mutate(latlong_traveled = sqrt((pickup_longitude - dropoff_longitude) ^ 2 + (pickup_latitude - dropoff_latitude) ^ 2))
tripData2 <- subset(tripData2, (tripData2$pickup_longitude > -74.1 & tripData2$pickup_longitude < -73.7 & tripData2$pickup_latitude < 60))
tripData2 <- subset(tripData2, latlong_traveled < 20)
dist_model <- lm(trip_distance ~ latlong_traveled, data = tripData2)
## Printing out the model gives us the model coefficients; the intercept and slope of the linear approximation
dist_model
plot(dist_model)
plot(tripData2$latlong_traveled, tripData2$trip_distance)
points(tripData2$latlong_traveled, predict(dist_model, newdata = tripData2), col = 'red', pch = 19, cex = .5)
?mutate
?predict
plot(tripData, col = clusters$cluster)
